
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.StaffUserScalarFieldEnum = {
  staffId: 'staffId',
  name: 'name',
  email: 'email',
  designation: 'designation',
  contactNumber: 'contactNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  assignedUserId: 'assignedUserId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  cid: 'cid',
  customerType: 'customerType',
  businessName: 'businessName',
  salutation: 'salutation',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  currency: 'currency',
  gstin: 'gstin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpportunityScalarFieldEnum = {
  id: 'id',
  oppRef: 'oppRef',
  title: 'title',
  status: 'status',
  value: 'value',
  currency: 'currency',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  projectManagerId: 'projectManagerId'
};

exports.Prisma.QuotationScalarFieldEnum = {
  id: 'id',
  quoteRef: 'quoteRef',
  revision: 'revision',
  status: 'status',
  currency: 'currency',
  fxRate: 'fxRate',
  totalCost: 'totalCost',
  markupPercent: 'markupPercent',
  insurancePercent: 'insurancePercent',
  financeCharge: 'financeCharge',
  subtotal: 'subtotal',
  vatPercent: 'vatPercent',
  totalWithVAT: 'totalWithVAT',
  profitMarginBHD: 'profitMarginBHD',
  fxGain: 'fxGain',
  validUntil: 'validUntil',
  paymentTerms: 'paymentTerms',
  deliveryTerms: 'deliveryTerms',
  expectedDeliveryDate: 'expectedDeliveryDate',
  marginApprovalPopup: 'marginApprovalPopup',
  approvedById: 'approvedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  opportunityId: 'opportunityId'
};

exports.Prisma.QuoteItemScalarFieldEnum = {
  id: 'id',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  quotationId: 'quotationId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderRef: 'orderRef',
  status: 'status',
  orderDate: 'orderDate',
  totalValue: 'totalValue',
  currency: 'currency',
  expectedDeliveryDate: 'expectedDeliveryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  opportunityId: 'opportunityId',
  quotationId: 'quotationId'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  poRef: 'poRef',
  issueDate: 'issueDate',
  supplier: 'supplier',
  totalValue: 'totalValue',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orderId: 'orderId'
};

exports.Prisma.ShipmentScalarFieldEnum = {
  id: 'id',
  shipmentRef: 'shipmentRef',
  status: 'status',
  trackingNumber: 'trackingNumber',
  carrier: 'carrier',
  shippedOn: 'shippedOn',
  expectedDeliveryDate: 'expectedDeliveryDate',
  actualShipmentDate: 'actualShipmentDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  orderId: 'orderId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentRef: 'paymentRef',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  status: 'status',
  paymentDate: 'paymentDate',
  paymentReceivedOn: 'paymentReceivedOn',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  orderId: 'orderId',
  shipmentId: 'shipmentId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileType: 'fileType',
  url: 'url',
  sizeBytes: 'sizeBytes',
  createdAt: 'createdAt',
  opportunityId: 'opportunityId',
  quotationId: 'quotationId',
  orderId: 'orderId',
  purchaseOrderId: 'purchaseOrderId',
  shipmentId: 'shipmentId',
  paymentId: 'paymentId'
};

exports.Prisma.CommunicationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  direction: 'direction',
  content: 'content',
  subject: 'subject',
  sender: 'sender',
  recipient: 'recipient',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  opportunityId: 'opportunityId',
  quotationId: 'quotationId',
  orderId: 'orderId',
  loggedByStaffId: 'loggedByStaffId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TaskStatus = exports.$Enums.TaskStatus = {
  Pending: 'Pending',
  InProgress: 'InProgress',
  Completed: 'Completed',
  Canceled: 'Canceled'
};

exports.Currency = exports.$Enums.Currency = {
  BHD: 'BHD',
  USD: 'USD',
  EUR: 'EUR',
  GBP: 'GBP',
  AED: 'AED'
};

exports.OpportunityStatus = exports.$Enums.OpportunityStatus = {
  OPEN: 'OPEN',
  QUALIFIED: 'QUALIFIED',
  PROPOSAL_SENT: 'PROPOSAL_SENT',
  NEGOTIATION: 'NEGOTIATION',
  WON: 'WON',
  LOST: 'LOST',
  ON_HOLD: 'ON_HOLD'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.QuotationStatus = exports.$Enums.QuotationStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING_CONFIRMATION: 'PENDING_CONFIRMATION',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ShipmentStatus = exports.$Enums.ShipmentStatus = {
  PENDING: 'PENDING',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  DELAYED: 'DELAYED',
  FAILED: 'FAILED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  OVERDUE: 'OVERDUE',
  FAILED: 'FAILED'
};

exports.CommunicationType = exports.$Enums.CommunicationType = {
  EMAIL: 'EMAIL',
  CALL: 'CALL',
  NOTE: 'NOTE',
  MEETING: 'MEETING'
};

exports.CommunicationDirection = exports.$Enums.CommunicationDirection = {
  INBOUND: 'INBOUND',
  OUTBOUND: 'OUTBOUND',
  INTERNAL: 'INTERNAL'
};

exports.Prisma.ModelName = {
  StaffUser: 'StaffUser',
  Task: 'Task',
  Customer: 'Customer',
  Opportunity: 'Opportunity',
  Project: 'Project',
  Quotation: 'Quotation',
  QuoteItem: 'QuoteItem',
  Order: 'Order',
  PurchaseOrder: 'PurchaseOrder',
  Shipment: 'Shipment',
  Payment: 'Payment',
  Document: 'Document',
  Communication: 'Communication'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
